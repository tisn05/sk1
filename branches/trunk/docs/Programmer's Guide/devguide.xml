<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book>
  <bookinfo>
    <title>sK1 Programmer's Guide</title>

    <author>
      <firstname>Igor</firstname>

      <surname>Novikov</surname>

      <affiliation>
        <orgname>sK1 Project (http://sk1project.org)</orgname>
      </affiliation>
    </author>

    <pubdate>10 Jule 2010</pubdate>
  </bookinfo>

  <preface>
    <title>Introduction</title>

    <para>The document describe internal implementation of sK1 Project. It is
    meant for anyone who wants to find out how sK1 is implemented, how to
    extend sK1 with new object types or wants to contribute to sK1. Document
    is based on "Developer's Guide" from Skencil project.</para>

    <para>Project is implemented using Python (high level logic) and C
    language (low level operations). So first guide step will be coding
    conventions</para>
  </preface>

  <chapter>
    <title>Coding Style Conventions </title>

    <section>
      <title>General coding issues</title>

      <para>sK1 application is created using Eclipse platform. So Eclipse IDE
      is a reference development tool and all further conventions assume this
      tool using. </para>

      <para>Creating application we used PyDev plugin (Python code
      processing), Subclipse (SVN integration), CDT plugin (C/C++ coding). So
      those wo wish joining to project or playing with source code should
      installing these tools.</para>

      <para>As a minor tools we also used Kate/KWrite editors and
      Konqueror/Dolphin file managers to explore code (for refactoring and
      sorce tree search). KDE applications are better for developers due to
      advanced feature comparing to GNOME apps.</para>
    </section>

    <section>
      <title>Python code idents</title>

      <para>Tabs are default code idents (8 spaces per tab preference in
      editor). To prevent mixed identation like in Skencil app the spaces are
      restricted for use in idents.</para>
    </section>

    <section>
      <title>Naming Conventions for variables, functions, methods and classes
      </title>

      <para>For reference naming use following rules:</para>

      <programlisting>Modules and packages:
    mymodule, mypackage       - complex module and package names

Classes:
    Object                    - simple class name
    MyComplexObject           - complex class name

Methods:
    self.method               - simple public method name
    self.complex_named_method - complex public method name
    self._internal_method     - protected method
    self.__built_in__         - private method

Functions:
    function                  - simple module function
    my_function               - complex named module function
    _internal_function        - protected module function

Variables:
    self.variable             - simple public class field
    self.my_variable          - complex public class field
    self._internal_varibale   - protected class field
    variable                  - simple local variable
    my_variable               - complex local variable

Constants:
    CONSTANT                  - module or package constant
    MY_CONSTANT               - complex named module or package constant</programlisting>

      <para>Avoid using indexed variables like t1,j3, a4 - it's really bad
      coding style. As exception traditional names related with coordinates:
      x0,x1,y0,y1</para>

      <para>Variable names should be clear and self explained. In other words
      the code should be human redable even without comments.</para>

      <para>Module and package names should be short, self explained,
      lowercase and contains english characters only. Uderscore and other
      symbols are not acceptable. </para>
    </section>

    <section>
      <title>Module structure and comments</title>

      <para>Each module file should start with utf-8 encoding label:</para>

      <programlisting># -*- coding: utf-8 -*-</programlisting>

      <para>After encoding label put short module description:</para>

      <programlisting>"""
bla-bla-bla module provides following features.
"""</programlisting>

      <para>It's important for python docs generation to have clear module
      description.</para>

      <para>Next part should be short copyright and license info:</para>

      <programlisting># Copyright (C) 2010 by John Simpson
#
# This library is covered by GNU Library General Public License.
# For more info see COPYRIGHTS file in application root directory.</programlisting>

      <para>You can use any license as you wish but always point on detailed
      license text. Including full license agreement into source is not a good
      idea. But this section should be present always due to open source
      nature of project. </para>

      <para>After coyright/license section put import statements:</para>

      <programlisting>from module import name, another_name
import module, package</programlisting>

      <para>Such position simplifies source code refactoring. So if possible
      avoid placing import statements inside logic code</para>

      <para>NEVER use import like:</para>

      <programlisting>from module import *</programlisting>

      <para>Such statement is useful for testing applications but not for
      production code.</para>

      <para>After imports try placing all module constants:</para>

      <programlisting>from module import name

MODCONST=0
ANOTHER=False
NEXTCONST="special string"</programlisting>

      <para>and only after this start functions or classes
      implementation.</para>
    </section>
  </chapter>

  <chapter>
    <title></title>

    <para>Avoid using indexed variables like t1,t3, a4 - it's really bad
    coding style. As exception traditional names related with coordinates:
    x0,x1,y0,y1</para>

    <para></para>

    <para></para>

    <para></para>

    <para></para>

    <para></para>

    <para></para>

    <para></para>

    <para></para>

    <para></para>

    <para></para>
  </chapter>
</book>
